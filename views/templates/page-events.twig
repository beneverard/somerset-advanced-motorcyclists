{% extends "base.twig" %}

{% block content %}

	<div class="col-span-4">

		<div class="event__group / band">

			<h2 class="event__group-title">Upcoming Events</h2>

			<div class="[tw: grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4 ]">

				{% for event in upcoming_events %}

					<div class="event">

						<header class="event__header">

							<div class="event__rating" data-event-rating="{{ event.level }}" title="{{ event.level_title }}"></div>

							<h3 class="event__title">{{ event.name }}</h3>

						</header>

						<p class="event__date">{{ event.formattedDate }}</p>

						{% if event.isOnline %}
							<p class="event__location"><a href="{{ event.location }}">Online</a></p>
						{% else %}
							<p class="event__location">{{ event.location }}</p>
						{% endif %}

					</div>

				{% endfor %}

			</div>

		</div>

		{% for group in future_groups %}

			<div class="event__group / band">

				<h3 class="event__group-title">{{ group.heading }}</h3>

				<div class="[tw: grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4 ]">

					{% for event in group.events %}

						<div class="event">

							<header class="event__header">

								<div class="event__rating" data-event-rating="{{ event.level }}" title="{{ event.level_title }}"></div>

								<h3 class="event__title">{{ event.name }}</h3>

							</header>

							<p class="event__date">{{ event.formattedDate }}</p>

							{% if event.isOnline %}
								<p class="event__location"><a href="{{ event.location }}">Online</a></p>
							{% else %}
								<p class="event__location">{{ event.location }}</p>
							{% endif %}

						</div>

					{% endfor %}

				</div>

			</div>

		{% endfor %}

	</div>


	<script>

		Vue.component('event', {
			template: '#event',
			props: {
				event: Object
			},
			computed: {
				date: function() {

					var start = moment.utc(this.event.start),
						end = moment.utc(this.event.end);

					// calculate and output an all day date range
					if ( this.event.all_day === '1' ) {

						var duration = moment.duration(end.diff(start)).asDays() - 1;

						if ( duration === 0 ) {
							return start.format('dddd Do MMMM YYYY');
						} else {

							// for multi-day, all day events, subtract one day from the end
							end = end.subtract(1, 'day');

							return start.format('dddd Do MMMM YYYY') + ' - ' + end.format('dddd Do MMMM YYYY');

						}

					}

					return moment.utc(this.event.start).format('h:mm a, dddd Do MMMM YYYY');

				},
				level_title: function() {

					switch (this.event.level) {

						case 'green':
							return 'Ride open to all SAM members';

						case 'amber':
							return 'Ride open to test-ready associates and test pass holders';

						case 'red':
							return 'Ride open to test pass holders only';

					}

				}
			},
			methods: {
				formatDate: function(moment) {
					return moment.format('YYYY');
				},
				isURL: function(location) {
					return location.substr(0, 4) === 'http';
				}
			}
		});

		var app = new Vue({
			computed: {



			},
			methods: {



			}
		});

	</script>

<?php get_footer(); ?>


{% endblock %}
